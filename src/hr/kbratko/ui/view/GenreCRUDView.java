/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.kbratko.ui.view;

import hr.kbratko.bll.base.manager.model.GenreDomainModelManager;
import hr.kbratko.bll.concrete.factory.GenreDomainModelManagerFactory;
import hr.kbratko.bll.concrete.model.GenreDomainModel;
import hr.kbratko.bll.concrete.model.UserDomainModel;
import hr.kbratko.lib.ui.Borders;
import hr.kbratko.lib.ui.Messages;
import hr.kbratko.ui.base.view.BaseUserView;
import hr.kbratko.ui.base.view.CardContainer;
import hr.kbratko.ui.view.model.GenreTableModel;
import java.awt.Dimension;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.Optional;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author kbratko
 */
public class GenreCRUDView
  extends BaseUserView {

  private final GenreDomainModelManager _genreManager =
                                        GenreDomainModelManagerFactory
                                          .getManager();

  private final Collection<JTextField> _validationFields;

  private Optional<GenreDomainModel> _selectedGenre = Optional.empty();

  /**
   * Creates new form GenreCRUDView
   *
   * @param loggedInUser
   * @param cardContainer
   */
  public GenreCRUDView(UserDomainModel loggedInUser,
                       CardContainer cardContainer) {
    super(loggedInUser, cardContainer);
    initComponents();

    this._validationFields = Arrays.asList(tfName);
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    tfName = new javax.swing.JTextField();
    lblName = new javax.swing.JLabel();
    btnUpdate = new javax.swing.JButton();
    btnDelete = new javax.swing.JButton();
    btnCreate = new javax.swing.JButton();
    spTblGenres = new javax.swing.JScrollPane();
    tblGenres = new javax.swing.JTable();

    addComponentListener(new java.awt.event.ComponentAdapter() {
      public void componentShown(java.awt.event.ComponentEvent evt) {
        formComponentShown(evt);
      }
    });

    tfName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

    lblName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
    lblName.setText("Name:");

    btnUpdate.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
    btnUpdate.setText("Update");
    btnUpdate.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnUpdateActionPerformed(evt);
      }
    });

    btnDelete.setBackground(new java.awt.Color(255, 102, 102));
    btnDelete.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
    btnDelete.setForeground(new java.awt.Color(255, 255, 255));
    btnDelete.setText("Delete");
    btnDelete.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnDeleteActionPerformed(evt);
      }
    });

    btnCreate.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
    btnCreate.setText("Create");
    btnCreate.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnCreateActionPerformed(evt);
      }
    });

    tblGenres.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
    tblGenres.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][] {

      },
      new String [] {

      }
    ));
    tblGenres.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseReleased(java.awt.event.MouseEvent evt) {
        tblGenresMouseReleased(evt);
      }
    });
    spTblGenres.setViewportView(tblGenres);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(spTblGenres)
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(lblName)
              .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addGroup(layout.createSequentialGroup()
                .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGap(0, 812, Short.MAX_VALUE)))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(lblName)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(18, 18, 18)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(18, 18, 18)
        .addComponent(spTblGenres, javax.swing.GroupLayout.DEFAULT_SIZE, 477, Short.MAX_VALUE)
        .addContainerGap())
    );
  }// </editor-fold>//GEN-END:initComponents

  private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
    if (this._selectedGenre.isEmpty() || !this.isFormValid())
      return;

    try {
      int updatedCount =
          this._genreManager.edit(this._selectedGenre.get().getGuid(),
                                  new GenreDomainModel(tfName.getText().trim()));

      if (updatedCount == 0) {
        Messages.showErrorMessage("Genre already exists",
                                  "Please insert valid unique name.");
        return;
      }

      this.init();

    }
    catch (Exception ex) {
      Messages.showErrorMessage("Error occured", ex.getMessage());
      Logger.getLogger(PersonCRUDView.class.getName()).log(Level.SEVERE, null,
                                                           ex);
    }
  }//GEN-LAST:event_btnUpdateActionPerformed

  private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
    if (!this.isFormValid())
      return;

    try {
      Optional<GenreDomainModel> genre =
                                 this._genreManager.add(
                                   new GenreDomainModel(tfName.getText().trim()));

      if (genre.isEmpty()) {
        Messages.showErrorMessage("Genre already exists",
                                  "Please insert valid unique name.");
        return;
      }

      this.init();

    }
    catch (Exception ex) {
      Messages.showErrorMessage("Error occured", ex.getMessage());
      Logger.getLogger(PersonCRUDView.class.getName()).log(Level.SEVERE, null,
                                                           ex);
    }
  }//GEN-LAST:event_btnCreateActionPerformed

  private void tblGenresMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblGenresMouseReleased
    try {
      this.cleanValidationFields();
      this.showSelectedGenre();
    }
    catch (Exception ex) {
      Messages.showErrorMessage("Error occured", ex.getMessage());
      Logger
        .getLogger(PersonCRUDView.class.getName())
        .log(Level.SEVERE, null, ex);
    }
  }//GEN-LAST:event_tblGenresMouseReleased

  private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
    try {
      this.init();
    }
    catch (Exception ex) {
      Messages.showErrorMessage("Error occured", ex.getMessage());
      Logger
        .getLogger(PersonCRUDView.class.getName())
        .log(Level.SEVERE, null, ex);
    }
  }//GEN-LAST:event_formComponentShown

  private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
    if (this._selectedGenre.isEmpty())
      return;

    int dialogResult = Messages.showConfirmDialog(
        "Do you really want to delete genre?",
        "Deleted genre can be returned only by application admin.");
    if (dialogResult != JOptionPane.OK_OPTION)
      return;

    try {
      int removeCount = this._genreManager.remove(this._selectedGenre.get()
          .getGuid());

      if (removeCount == 0) {
        Messages.showErrorMessage("Genre was not deleted",
                                  "Problem occured while deleting genre.");
        return;
      }

      Messages.showInformationMessage("Genre deleted",
                                      "Genre was successfully deleted.");
      this.init();
    }
    catch (Exception ex) {
      Messages.showErrorMessage("Error occured", ex.getMessage());
      Logger
        .getLogger(PersonCRUDView.class.getName())
        .log(Level.SEVERE, null, ex);
    }
  }//GEN-LAST:event_btnDeleteActionPerformed


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton btnCreate;
  private javax.swing.JButton btnDelete;
  private javax.swing.JButton btnUpdate;
  private javax.swing.JLabel lblName;
  private javax.swing.JScrollPane spTblGenres;
  private javax.swing.JTable tblGenres;
  private javax.swing.JTextField tfName;
  // End of variables declaration//GEN-END:variables

  private void init()
    throws Exception {
    this.defaultValidationFieldBorders();
    this.cleanValidationFields();
    this.initTable();
  }

  private void initTable()
    throws Exception {
    tblGenres.setAutoCreateRowSorter(true);
    tblGenres.setMaximumSize(new Dimension(spTblGenres.getWidth(),
                                           spTblGenres.getHeight()));

    Collection<GenreDomainModel> genres =
                                 _genreManager.getAllIfAvailable();
    var tableModel = new GenreTableModel((List<GenreDomainModel>) genres);
    tblGenres.setModel(tableModel);
  }

  private void showSelectedGenre()
    throws Exception {
    int selectedRow = tblGenres.getSelectedRow();
    int realRowIndex = tblGenres.convertRowIndexToModel(selectedRow);
    int keyOfRow =
        ((GenreTableModel) tblGenres.getModel()).getKeyOfRow(realRowIndex);

    this._selectedGenre = this._genreManager.getByIdIfAvailable(keyOfRow);
    if (this._selectedGenre.isPresent())
      fillForm(this._selectedGenre.get());
  }

  private void cleanValidationFields() {
    this._validationFields.forEach(field -> field.setText(""));
  }

  private void fillForm(GenreDomainModel genre) {
    this.tfName.setText(genre.getName());
  }

  private boolean isFormValid() {
    boolean ok = true;

    for (JTextField field : this._validationFields) {
      String text = field.getText().trim();
      ok &= !text.isEmpty();

      if (text.isEmpty())
        Borders.setBorderError(field);
      else
        Borders.setBorderDefault(field);
    }

    return ok;
  }

  private void defaultValidationFieldBorders() {
    this._validationFields.forEach(field -> Borders.setBorderDefault(field));
  }

}
